#!/bin/bash

branch=`git rev-parse --abbrev-ref HEAD`
branch_squash="$branch-squash"
tag_prefix="$(echo $branch | head -c 1)*" # assumes starting number is a single character
if [ $# -eq 1 ]; then
  tag_prefix=$1
fi

echo "Grabbing tags following pattern $tag_prefix..."
tags=(`git log --reverse --pretty=%d --tags=$tag_prefix --no-walk | sed 's/ (tag: //' | sed 's/)//'`)

# pull out first tag and remove it from $tags as it will be used as base
tags_first=${tags[0]}
tags=${tags[@]:1}
echo "Using $tags_first as base."

function commitAll {
  git add --all .
  git commit -m "Squashed $tag."
}

# determine if $branch_squash already exists
git show-ref --verify --quiet refs/heads/$branch_squash
if [ $? -ne 0 ]; then # non-zero exit code indicates branch does not exist
  echo "Create new branch for squashed commits: $branch_squash..."

  # checkout base tag, create new branch, flush git history, and commit base files
  git checkout $tags_first
  git symbolic-ref HEAD refs/heads/$branch_squash
  rm .git/index
  tag=$tags_first; commitAll
  git clean -fdx
else
  echo "Resuming in existing squashed branch..."
  git checkout $branch_squash
fi

# cycle through tags to squash if necessary
previous=$tags_first
for tag in $tags;
do
  exists=`git --no-pager log --oneline -F --grep="Squashed $tag."`
  if [ -z "$exists" ]; then
    echo "Squashing $tag..."
    # pull diff between tags and apply to squash (current) branch
    git diff --full-index --binary $previous $tag | git apply --whitespace=nowarn
    commitAll
  else
    echo "Already squashed $tag, skipping..."
  fi
  previous=$tag
done
