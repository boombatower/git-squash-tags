#!/bin/bash

set -e

PROGNAME="git-squash-tags"
PROGVERSION="0.3u"

branch_suffix="-squash"
tag_pattern="^.*$"
tag_prefix="squash_"

helpmsg="Usage: $0 [OPTIONS...]
Create a new branch, squashing all commits between tags matching a prefix.
Note: If a given commit has multiple ref names, only last tag is considered.

Options:
    -S, --branch-suffix SUFFIX   new branch is created appending SUFFIX (default: $branch_suffix) to the current branch
    -p, --tag-pattern PATTERN    pattern to select some specific tags only (default: $tag_pattern)
    -P, --tag-prefix PREFIX      prefix for new tags on the new branch (default: $tag_prefix)
    -c, --with-commits           also cherry-pick commits after last tags
    -h, --help                   this help
    -V, --version                show version and exit
"

for ((;$#;)) ; do
  case "$1" in
    -S|--branch-suffix) shift ; [ "$1" ] && branch_suffix="$1" || { echo "$helpmsg" ; exit 2 ; } ;;
    -p|--tag-pattern) shift ; [ "$1" ] && tag_pattern="$1" || { echo "$helpmsg" ; exit 2 ; } ;;
    -P|--tag-prefix) shift ; [ "$1" ] && tag_prefix="$1" || { echo "$helpmsg" ; exit 2 ; } ;;
    -c|--with-commits) withcommits=1 ;;
    -h|--h*) echo "$helpmsg" ; exit ;;
    -V|--vers*) echo "$PROGNAME - $PROGVERSION" ; exit ;;
    *) echo -e "Error: Unrecognized option $1\n$helpmsg" >&2 ; exit 2 ;;
  esac
  shift
done

branch=`git rev-parse --abbrev-ref HEAD`

branch_squash="$branch$branch_suffix"

echo "Grabbing tags following pattern $tag_pattern..."
while read commitsh refname ; do
	commits+=("$commitsh")
	if tag="$(sed -n 's-.*tag: \([^ ),]\+\).*-\1-p ' <<<"$refname" | grep "$tag_pattern" )" ; then
		echo " $tag"
		tags+=("$tag")
		unset commits
	else
		echo -n "+"
	fi
done <<<$( git log --reverse --pretty="%H %d" | tee >( echo "$(grep "," | tee >(wc -l) >&2 ) commit(s) found with multiple ref names." >&2 ) )
echo

# pull out first tag and remove it from $tags as it will be used as base
tags_first=${tags[0]}
echo "${#tags[@]} tags. Using $tags_first as base."
tags=${tags[@]:1}

function commitAll {
  local commitMsg="$2"
  git add --all .
  [ "$commitMsg" ] || commitMsg=`git show --summary "$1"`
  git commit -m "$commitMsg"
}

# determine if $branch_squash already exists
if git show-ref --verify --quiet refs/heads/$branch_squash ; then
  echo "Resuming in existing squashed branch..."
  git checkout $branch_squash
else
  echo "Create new branch for squashed commits: $branch_squash..."
  # checkout base tag and create new branch
  git checkout $tags_first
  git checkout -b $branch_squash
fi


logs="$(git log --pretty="%H (%D) %s" )"

# cycle through tags to squash if necessary
previous=$tags_first
for tag in $tags; do
	if ! grep "[ (]tag: $tag_prefix$tag[,)]" <<<"$logs" ; then
		if [ "`git tag -l "$tag_prefix$tag"`" ] ; then
			git rebase "$tag_prefix$tag"
		else
			echo "Squashing $previous..$tag ..."
			# pull diff between tags and apply to squash (current) branch
			git diff --full-index --binary "$previous" "$tag" | git apply --whitespace=nowarn
			commitAll "$tag"
			git tag "$tag_prefix$tag"
		fi
	fi
	previous=$tag
	echo
done

((withcommits)) || exit

# cycle through commits since last tag
for commitsh in "${commits[@]}" ; do
	if ! grep " commit $commitsh " <<<"$logs" ; then
		# echo something on stdout
		git log --pretty=oneline --abbrev-commit -n 1 "$commitsh"
		# pull diff and apply
		git diff --full-index --binary "$previous" "$commitsh" | git apply --whitespace=nowarn
		commitAll "$commitsh"
	fi
	previous=$commitsh
	echo
done
